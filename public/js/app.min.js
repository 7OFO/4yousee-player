// === logger.js ===
//custom logger
function logError(message,error){console.error("[ERRO] "+message,error);writeLogToFile("ERRO",message,error)}function logEvent(message){var timestamp=new Date().toISOString();console.log("[INFO] "+timestamp+": "+message);writeLogToFile("INFO",message)}function logVideoError(message,videoUrl,errorCode){var timestamp=new Date().toISOString();var logMessage="Erro de v\xEDdeo - URL: "+videoUrl+" - "+message+" - C\xF3digo: "+errorCode;console.error("[ERRO_DE_VIDEO] "+timestamp+": "+logMessage);writeLogToFile("ERRO_DE_VIDEO",logMessage)}// Variável para controlar logs duplicados de troca de vídeo
var lastVideoChangeLog=null;function logVideoChange(fromVideo,toVideo,index){var timestamp=new Date().toISOString();var logMessage="Troca de v\xEDdeo - De: "+fromVideo+" - Para: "+toVideo+" - \xCDndice: "+index;// Verifica se é o mesmo log da última vez para evitar duplicação
var currentLogKey=fromVideo+"|"+toVideo+"|"+index;if(lastVideoChangeLog===currentLogKey){return}lastVideoChangeLog=currentLogKey;console.log("[TROCA_DE_VIDEO] "+timestamp+": "+logMessage);writeLogToFile("TROCA_DE_VIDEO",logMessage)}function writeLogToFile(level,message,error){try{var timestamp=new Date().toISOString();var logEntry={timestamp:timestamp,level:level,message:message,error:error?{name:error.name,message:error.message,stack:error.stack}:null,userAgent:navigator.userAgent,url:window.location.href};var date=new Date().toISOString().split("T")[0];var filename="player-"+date+".log";var existingLogs=localStorage.getItem("videoPlayerLogs_"+date)||"";var newLogLine=JSON.stringify(logEntry)+"\n";localStorage.setItem("videoPlayerLogs_"+date,existingLogs+newLogLine);if(typeof require!=="undefined"){try{var fs=require("fs");var path=require("path");var logDir=path.join(process.cwd(),"log");var logFile=path.join(logDir,filename);if(!fs.existsSync(logDir)){fs.mkdirSync(logDir,{recursive:true})}fs.appendFileSync(logFile,newLogLine,"utf8")}catch(fsError){console.error("Erro ao escrever arquivo de log:",fsError)}}}catch(e){console.error("Erro ao escrever log:",e)}}function getLogFilePath(date){if(typeof require!=="undefined"){try{var path=require("path");return path.join(process.cwd(),"log","video-player-"+date+".log")}catch(e){console.error("Erro ao obter caminho do log:",e)}}return null}function clearOldLogs(){try{var currentDate=new Date;var keys=Object.keys(localStorage);keys.forEach(function(key){if(key.startsWith("videoPlayerLogs_")){var logDate=new Date(key.replace("videoPlayerLogs_",""));var daysDiff=(currentDate-logDate)/(1000*60*60*24);if(daysDiff>1){localStorage.removeItem(key)}}})}catch(e){console.error("Erro ao limpar logs antigos:",e)}}clearOldLogs();window.logError=logError;window.logEvent=logEvent;window.logVideoError=logVideoError;window.logVideoChange=logVideoChange;window.getLogFilePath=getLogFilePath;window.clearOldLogs=clearOldLogs;// === PlaylistManager.js ===
// Componente para gerenciar a playlist
function PlaylistManager(){var playlist=[];var currentIndex=0;var isLoading=false;function loadPlaylist(callback){if(isLoading)return;isLoading=true;var xhr=new XMLHttpRequest;xhr.open("GET","playlist.json",true);xhr.onreadystatechange=function(){if(xhr.readyState===4){isLoading=false;if(xhr.status===200){try{var data=JSON.parse(xhr.responseText);playlist=data.playlist||[];if(playlist.length>0){if(callback)callback(null,playlist)}else{logError("Playlist vazia",null);if(callback)callback(new Error("Playlist vazia"))}}catch(err){logError("Erro ao parsear JSON da playlist",err);if(callback)callback(err)}}else{var error=new Error("Erro ao carregar playlist - Status: "+xhr.status);logError(error.message,null);if(callback)callback(error)}}};xhr.onerror=function(){isLoading=false;var error=new Error("Erro de rede ao carregar playlist");logError(error.message,null);if(callback)callback(error)};xhr.send()}function getPlaylist(){return playlist}function getCurrentIndex(){return currentIndex}function setCurrentIndex(index){if(index>=0&&index<playlist.length){currentIndex=index}}function getCurrentItem(){return playlist[currentIndex]}function getNextIndex(){return(currentIndex+1)%playlist.length}function getPreviousIndex(){return currentIndex===0?playlist.length-1:currentIndex-1}function moveToNext(){currentIndex=getNextIndex();return getCurrentItem()}function getItemByIndex(index){return playlist[index]}function getPlaylistLength(){return playlist.length}function isPlaylistEmpty(){return playlist.length===0}// Interface pública
return{loadPlaylist:loadPlaylist,getPlaylist:getPlaylist,getCurrentIndex:getCurrentIndex,setCurrentIndex:setCurrentIndex,getCurrentItem:getCurrentItem,getNextIndex:getNextIndex,getPreviousIndex:getPreviousIndex,moveToNext:moveToNext,getItemByIndex:getItemByIndex,getPlaylistLength:getPlaylistLength,isPlaylistEmpty:isPlaylistEmpty}}// Exportar para uso global
window.PlaylistManager=PlaylistManager;// === VideoManager.js ===
// Componente para gerenciar elementos de vídeo e transições
function VideoManager(video1Element,video2Element){var video1=video1Element;var video2=video2Element;var activeVideo=video1;var inactiveVideo=video2;var isTransitioning=false;var videoLoadTimeout;function getActiveVideo(){return activeVideo}function getInactiveVideo(){return inactiveVideo}function isCurrentlyTransitioning(){return isTransitioning}function setTransitioning(state){isTransitioning=state}function swapVideos(){var temp=activeVideo;activeVideo=inactiveVideo;inactiveVideo=temp}function clearVideoListeners(videoElement){videoElement.onended=null;videoElement.onerror=null;videoElement.onloadstart=null;videoElement.oncanplay=null;videoElement.oncanplaythrough=null;videoElement.onstalled=null;if(videoLoadTimeout){clearTimeout(videoLoadTimeout);videoLoadTimeout=null}}function setupVideoHandlers(videoElement,item,onEndedCallback,onErrorCallback,onCanPlayCallback){videoElement.onended=function(){if(videoElement===activeVideo&&onEndedCallback){onEndedCallback()}};videoElement.onerror=function(e){var errorMsg="Erro ao carregar: "+item.url;var errorCode="Desconhecido";if(videoElement.error){switch(videoElement.error.code){case videoElement.error.MEDIA_ERR_ABORTED:errorCode="Reprodu\xE7\xE3o abortada";break;case videoElement.error.MEDIA_ERR_NETWORK:errorCode="Erro de rede";break;case videoElement.error.MEDIA_ERR_DECODE:errorCode="Erro de decodifica\xE7\xE3o";break;case videoElement.error.MEDIA_ERR_SRC_NOT_SUPPORTED:errorCode="Formato n\xE3o suportado";break;default:errorCode="C\xF3digo: "+videoElement.error.code}errorMsg+=" - "+errorCode}logVideoError(errorMsg,item.url,errorCode);if(onErrorCallback){onErrorCallback(videoElement,item)}};videoElement.onloadstart=function(){if(videoLoadTimeout){clearTimeout(videoLoadTimeout)}};videoElement.oncanplaythrough=function(){if(videoLoadTimeout){clearTimeout(videoLoadTimeout)}if(onCanPlayCallback){onCanPlayCallback(videoElement,item,"canplaythrough")}};videoElement.oncanplay=function(){if(videoLoadTimeout){clearTimeout(videoLoadTimeout)}if(videoElement===inactiveVideo&&!videoElement.oncanplaythrough){if(onCanPlayCallback){onCanPlayCallback(videoElement,item,"canplay")}}else if(videoElement===activeVideo&&!videoElement.oncanplaythrough){if(onCanPlayCallback){onCanPlayCallback(videoElement,item,"canplay-fallback")}}};videoElement.onstalled=function(){var errorMsg="V\xEDdeo travado: "+item.description+". Pulando para o pr\xF3ximo.";logVideoError(errorMsg,item.url,"STALLED");if(onErrorCallback){onErrorCallback(videoElement,item)}}}function startCrossfade(onComplete){if(isTransitioning)return;isTransitioning=true;activeVideo.className="active";inactiveVideo.className="inactive";setTimeout(function(){activeVideo.className="inactive";inactiveVideo.className="active";setTimeout(function(){swapVideos();inactiveVideo.className="hidden";inactiveVideo.pause();inactiveVideo.currentTime=0;isTransitioning=false;if(onComplete){onComplete()}},1000)},100)}function playVideoWithRetry(videoElement,onSuccess,onError){var playPromise=videoElement.play();if(playPromise&&typeof playPromise.catch==="function"){playPromise.then(function(){if(onSuccess)onSuccess()}).catch(function(){videoElement.muted=true;setTimeout(function(){var retryPromise=videoElement.play();if(retryPromise&&typeof retryPromise.catch==="function"){retryPromise.then(function(){setTimeout(function(){videoElement.muted=false},1000);if(onSuccess)onSuccess()}).catch(function(retryErr){logError("Erro na segunda tentativa de reprodu\xE7\xE3o",retryErr);if(onError)onError(retryErr)})}},500)})}else{if(onSuccess)onSuccess()}}function initializeVideo(videoElement,item,className){videoElement.src=item.url;videoElement.className=className||"active"}// Interface pública
return{getActiveVideo:getActiveVideo,getInactiveVideo:getInactiveVideo,isCurrentlyTransitioning:isCurrentlyTransitioning,setTransitioning:setTransitioning,swapVideos:swapVideos,clearVideoListeners:clearVideoListeners,setupVideoHandlers:setupVideoHandlers,startCrossfade:startCrossfade,playVideoWithRetry:playVideoWithRetry,initializeVideo:initializeVideo}}// Exportar para uso global
window.VideoManager=VideoManager;// === UIManager.js ===
// Componente para gerenciar a interface do usuário
function UIManager(descriptionElement){var descriptionEl=descriptionElement;var descriptionTimeout;var isDescriptionVisible=true;function updateDescription(text,index){if(descriptionEl){var newText=text||"Video "+(index+1);descriptionEl.textContent=newText;descriptionEl.className="fade-in";isDescriptionVisible=true}}function hideDescription(){if(descriptionEl&&isDescriptionVisible){descriptionEl.className="fade-out";isDescriptionVisible=false}}function showDescription(){if(descriptionEl&&!isDescriptionVisible){descriptionEl.className="fade-in";isDescriptionVisible=true}}function setDescriptionTimeout(callback,delay){if(descriptionTimeout){clearTimeout(descriptionTimeout)}descriptionTimeout=setTimeout(callback,delay)}function clearDescriptionTimeout(){if(descriptionTimeout){clearTimeout(descriptionTimeout);descriptionTimeout=null}}function isDescriptionCurrentlyVisible(){return isDescriptionVisible}function getDescriptionElement(){return descriptionEl}function setDescriptionClass(className){if(descriptionEl){descriptionEl.className=className}}function getDescriptionText(){return descriptionEl?descriptionEl.textContent:""}// Função para atualizar descrição com base no item atual da playlist
function updateDescriptionFromPlaylist(playlistManager){var currentItem=playlistManager.getCurrentItem();var currentIndex=playlistManager.getCurrentIndex();if(currentItem){updateDescription(currentItem.description,currentIndex)}}// Interface pública
return{updateDescription:updateDescription,hideDescription:hideDescription,showDescription:showDescription,setDescriptionTimeout:setDescriptionTimeout,clearDescriptionTimeout:clearDescriptionTimeout,isDescriptionCurrentlyVisible:isDescriptionCurrentlyVisible,getDescriptionElement:getDescriptionElement,setDescriptionClass:setDescriptionClass,getDescriptionText:getDescriptionText,updateDescriptionFromPlaylist:updateDescriptionFromPlaylist}}// Exportar para uso global
window.UIManager=UIManager;// === VideoPlayer.js ===
// Componente principal do Video Player
function VideoPlayer(video1Element,video2Element,descriptionElement){// Inicializar componentes
var playlistManager=new PlaylistManager;var videoManager=new VideoManager(video1Element,video2Element);var uiManager=new UIManager(descriptionElement);// Estado interno
var isInitialized=false;// Callbacks para eventos de vídeo
function onVideoEnded(){playlistManager.moveToNext();crossfadeToNext()}function onVideoError(videoElement,item){var errorMsg="Erro no carregamento do v\xEDdeo: "+item.description+". Pulando para o pr\xF3ximo.";logVideoError(errorMsg,item.url,"LOAD_FAILED");if(videoElement===videoManager.getActiveVideo()){playlistManager.moveToNext();crossfadeToNext()}else{playlistManager.moveToNext();var nextItem=playlistManager.getCurrentItem();// Log de troca de vídeo para vídeo inativo
logVideoChange(item.description||item.url,nextItem.description||nextItem.url,playlistManager.getCurrentIndex());videoElement.src=nextItem.url;videoElement.load()}}function onVideoCanPlay(videoElement,item,eventType){if(eventType==="canplaythrough"){if(videoElement===videoManager.getInactiveVideo()){uiManager.updateDescriptionFromPlaylist(playlistManager);videoManager.startCrossfade()}else if(videoElement===videoManager.getActiveVideo()){uiManager.updateDescriptionFromPlaylist(playlistManager);logEvent("V\xEDdeo ativo carregado: "+item.description)}}else if(eventType==="canplay"){if(videoElement===videoManager.getInactiveVideo()){uiManager.updateDescriptionFromPlaylist(playlistManager);setTimeout(function(){videoManager.startCrossfade()},500)}}else if(eventType==="canplay-fallback"){uiManager.updateDescriptionFromPlaylist(playlistManager);logEvent("V\xEDdeo ativo carregado (fallback): "+item.description)}}function playVideo(index){var item=playlistManager.getItemByIndex(index);if(!item){logError("Item da playlist n\xE3o encontrado no \xEDndice: "+index,null);return}var videoUrl=item.url;if(videoManager.isCurrentlyTransitioning()){logEvent("Transi\xE7\xE3o em andamento, aguardando...");setTimeout(function(){playVideo(index)},500);return}var inactiveVideo=videoManager.getInactiveVideo();videoManager.clearVideoListeners(video1Element);videoManager.clearVideoListeners(video2Element);inactiveVideo.src=videoUrl;if(typeof preloadNextVideos==="function"){preloadNextVideos(index,playlistManager.getPlaylist())}videoManager.setupVideoHandlers(inactiveVideo,item,onVideoEnded,onVideoError,onVideoCanPlay);inactiveVideo.load();// Estratégia de reprodução otimizada para Smart TVs
videoManager.playVideoWithRetry(inactiveVideo)}function crossfadeToNext(){if(playlistManager.isPlaylistEmpty())return;var currentItem=playlistManager.getCurrentItem();var previousIndex=playlistManager.getPreviousIndex();var previousItem=playlistManager.getItemByIndex(previousIndex);logVideoChange(previousItem.description||previousItem.url,currentItem.description||currentItem.url,playlistManager.getCurrentIndex());playVideo(playlistManager.getCurrentIndex())}function initializeFirstVideo(){if(!playlistManager.isPlaylistEmpty()){var firstItem=playlistManager.getCurrentItem();var videoUrl=firstItem.url;var activeVideo=videoManager.getActiveVideo();var inactiveVideo=videoManager.getInactiveVideo();activeVideo.src=videoUrl;activeVideo.className="active";inactiveVideo.className="hidden";videoManager.setupVideoHandlers(activeVideo,firstItem,onVideoEnded,onVideoError,onVideoCanPlay);activeVideo.load();videoManager.playVideoWithRetry(activeVideo,function(){logEvent("Primeiro video iniciado com sucesso: "+firstItem.description+" (remoto)")},function(error){logError("Erro ao iniciar o primeiro video: "+error.message)});if(typeof preloadNextVideos==="function"){preloadNextVideos(0,playlistManager.getPlaylist())}logEvent("Aguardando primeiro v\xEDdeo: "+firstItem.description+" (remoto)")}}function initialize(){if(isInitialized)return;playlistManager.loadPlaylist(function(error,playlist){if(error){logError("Erro ao carregar playlist",error);return}if(playlist&&playlist.length>0){isInitialized=true;initializeFirstVideo()}})}// Funções públicas para compatibilidade
function updateDescription(){uiManager.updateDescriptionFromPlaylist(playlistManager)}function handleVideoError(videoElement,item){onVideoError(videoElement,item)}// Interface pública
return{initialize:initialize,playVideo:playVideo,updateDescription:updateDescription,handleVideoError:handleVideoError,getPlaylistManager:function getPlaylistManager(){return playlistManager},getVideoManager:function getVideoManager(){return videoManager},getUIManager:function getUIManager(){return uiManager}}}// Exportar para uso global
window.VideoPlayer=VideoPlayer;// === player.js ===
var video1=document.getElementById("video1");var video2=document.getElementById("video2");var desc=document.getElementById("description");var playlist=[];var currentIndex=0;var isLoading=false;var activeVideo=video1;var inactiveVideo=video2;var isTransitioning=false;// Inicializar instância global do player
var videoPlayer=null;// Função para obter a instância do player (lazy initialization)
function getVideoPlayer(){if(!videoPlayer){videoPlayer=new VideoPlayer(video1,video2,desc)}return videoPlayer}function loadPlaylist(){var player=getVideoPlayer();player.initialize()}function playVideo(index){var player=getVideoPlayer();player.playVideo(index)}// Função mantida para compatibilidade com código legado
function handleVideoError(videoElement,item){var player=getVideoPlayer();player.handleVideoError(videoElement,item)}function updateDescription(){var player=getVideoPlayer();player.updateDescription()}window.updateDescription=updateDescription;window.handleVideoError=handleVideoError;if(document.readyState==="loading"){document.addEventListener("DOMContentLoaded",loadPlaylist)}else{loadPlaylist()}window.playVideo=playVideo;
